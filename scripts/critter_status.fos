#ifndef CRITTER_STATUS
#define CRITTER_STATUS

#include "_utils.fos"
#include "critter_status_h.fos"

void ChangeStatus( Critter& cr, uint16 status, uint8 value, bool set )
{
    bool onlyFlag = false;

    if( set )
    {
        switch( status )
        {
			case( CR_STATUS_BLEED ):
				BleedCritter( cr, value );
				break;
			default:
				break;
        }
        SETFLAG( cr.StatBase[ ST_CRSTATUS ], status );
    }
    else
    {
        switch( status )
        {
			case( CR_STATUS_HEAVY_DMG ):
				onlyFlag = true;
				break;
			case( CR_STATUS_BULLET_OVER ):
				onlyFlag = true;
				break;
			default:
				break;
        }

        if( onlyFlag && FLAG( cr.StatBase[ ST_CRSTATUS ], status ) )
		{
            UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], status );
		}
	}
}

void BleedTest( Critter& cr, int bleed, int p1, int p2 ) 
{
	Critter@ target = ( p1 == 0 ? null : GetCritter( p1 ) );
	if( !valid( target ) ) 
	{
		@target = @cr;
	}
	
	target.ParamBase[ QST_GAMEMODE ] = GAME_TEST;
	BleedCritter( target, bleed );
}

void BleedCritter( Critter& cr, int8 bleedValue )
{
	uint[] indexes, durations, rates;
    int eventCount = cr.GetTimeEvents( CTE_BLEED, indexes, durations, rates );
	if( eventCount > 0 )
	{
		cr.EraseTimeEvents( CTE_BLEED );
	}
	
	uint time = ( cr.Param[ QST_GAMEMODE ] == GAME_TEST ? 1 : 60 );

	cr.StatBase[ ST_BLEED ] += bleedValue;
	if( cr.StatBase[ ST_BLEED ] > 0 )
	{
		SETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
	}
	else
	{
		UNSETFLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED );
	}
	
    cr.AddTimeEvent( "cte_bleed", REAL_SECOND( time ), CTE_BLEED, 0 );
}

uint cte_bleed( Critter& cr, int identifier, uint& rate )
{
	if( !valid( cr ) )
	{
		return 0;
	}
	
	int maxHP = cr.Stat[ ST_MAX_LIFE ];

    int bleed = CLAMP( int( cr.StatBase[ ST_BLEED ] * 0.9 ) - 1, 0, maxHP );
	
	if( bleed <= Random( 1, cr.Stat[ ST_ENDURANCE ] ) )
	{
		cr.StatBase[ ST_BLEED ] = 0;
		return 0;
	}
	
	if( cr.IsKnockout() || cr.StatBase[ ST_CURRENT_HP ] + cr.Stat [ST_HEALING_RATE] > 0  )
	{
		cr.StatBase[ ST_CURRENT_HP ] -= bleed;
		cr.StatBase[ ST_BLEED ] = CLAMP( int( bleed * 0.9 ) - 1, 0, maxHP );
	}	

	uint16 hx = cr.HexX, hy = cr.HexY;
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		CheckBlood( map, hx, hy );
	}
	
	int time = 30;
	if( cr.Param[ QST_GAMEMODE ] == GAME_TEST )
	{
		time = 3;
	}
	
	if( cr.IsKnockout() || cr.IsNpc() )
	{
		time *= 2;
	}
	
	return REAL_SECOND( time );
}

void CheckBlood( Map& map, uint16 hx, uint16 hy )
{
	bool wasBlooded = false;
	Item@[] dirts;
	Item@ dirt = null;
	map.GetItems( hx, hy, dirts );

	for( uint i = 0, len = dirts.length(); i < len; i ++ )
	{
		@ dirt = dirts[i];
		if( !valid( dirt ) )
		{
			continue;
		}
		uint dirtPid = dirt.GetProtoId();
		if( bloods[0].find( dirtPid ) != -1 )
		{
			dirt.BLOOD_AMOUNT++;
			if( dirt.BLOOD_AMOUNT >= spoil_Val )
			{
				dirt.ChangeProto( bloods[1][Random( 0, bloods[1].length() - 1 )] );
			}
			wasBlooded = true;
			break;
		}
		
		if( bloods[1].find( dirtPid ) != -1 )
		{
			dirt.BLOOD_AMOUNT++;
			wasBlooded = true;
			break;
		}
	}

	
	if( !wasBlooded )
	{
		AddBlood( map, hx, hy, 0 );
	}
}

void AddBlood( Map& map, uint16 hx, uint16 hy, uint size )
{
	uint pid = bloods[size][Random( 0, bloods[size].length() - 1)];
	map.AddItem( hx, hy, pid, 1 );
	
	Item@ blood = null;
	Item@[] ground;
	map.GetItems( hx, hy, ground );

	if( !valid( ground ) )
	{
		return;
	}
	for( uint i = 0, len = ground.length(); i < len; i++ )
	{
		if( bloods[size].find( ground[i].GetProtoId() ) > -1 )
		{
			@blood = ground[i];
			if( size == 2 )
			{
				blood.BLOOD_AMOUNT = 4;
			}
			break;
		}
	}
	if( valid( blood ) )
	{
		uint[] values = { blood.Id };
		blood.Val1 = CreateTimeEvent( __FullSecond + REAL_MINUTE( 1 + 15 * blood.BLOOD_AMOUNT ), "e_dryup", values, true );
	}
}

uint e_dryup( uint[]@ values )
{
	if( !valid(values) )
	{
		return 0;
	}
	
	Item@ blood = GetItem( values[0] );
	if( !valid( blood ) )
	{
		return 0;
	}
	
	DeleteItem( blood );
	return 0;
}

void DropBleed( Critter& cr )
{
    uint[] indexes;
    uint[] rates;
    uint[] durations;

    if( cr.GetTimeEvents( CTE_BLEED, indexes, durations, rates ) > 0 )
	{
        cr.EraseTimeEvents( CTE_BLEED );
	}
}

#endif // CRITTER_STATUS