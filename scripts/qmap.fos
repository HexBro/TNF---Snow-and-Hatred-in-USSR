#ifndef QMAP_MODULE
#define QMAP_MODULE

#include "_utils.fos"

MapTileData@[] MapTileDatabase;

class MapTileData
{
    uint Id;
    int[] TileHashs;
    int[] Tiles;
    uint[] Players;

    MapTileData()
    {
        Id = 0;

        TileHashs.resize( 1 );
        TileHashs[ 0 ] = 0;

        Tiles.resize( 2 );
        Tiles[ 0 ] = 0;
        Tiles[ 1 ] = 0;

        Players.resize( 0 );
    }

    uint16 TileHashCount()
    {
        return TileHashs.length();
    }

    uint TileCount()
    {
        return Tiles.length() >> 1;
    }

    bool AddPlayer( Critter& player )
    {
        bool ck = false;
        for( uint i = 0, len = Players.length(); i < len; i++ )
        {
            if( Players[ i ] != player.Id )
			{
                continue;
            }
			ck = true;
            break;
        }

        if( !ck )
        {
            Players.insertLast( player.Id );
            ck = true;
        }

        ck = ck && ( TileHashCount() < 1 || SendFullHash( player ) ) && ( TileCount() < 1 || SendAllTiles( player ) );

        if( ck )
		{
            player.ParamBase[ ST_QMAP ] = Id;
        }
		else
		{
            Log( "qmap AddPlayer error." );
		}
		
        return ck;
    }

    bool DelPlayer( Critter& player )
    {
        for( uint i = 0, len = Players.length(); i < len; i++ )
        {
            if( Players[ i ] != player.Id || !player.IsPlayer() )
			{
                continue;
            }
			
			player.RunClientScript( "qmap_client@__delMTD", int(Id), 0, 0, null, null );
            player.ParamBase[ ST_QMAP ] = 0;
            Players.removeAt( i );
            return true;
        }
		
        return false;
    }

    void GetSendPlayers( Critter@ player, Critter@[]& crs )
    {
        if( !valid( player ) )
        {
            Map@ map = GetMap( Id );
            Critter@ cr = null;
			
            for( uint i = 0, len = Players.length(); i < len; i++ )
            {
                @cr = map.GetCritter( Players[ i ] );
                if( !valid( cr ) )
                {
                    Players.removeAt( i );
                    i--;
                    continue;
                }
				
                crs.insertLast( cr );
            }

        }
        else
		{
            crs.insertLast( player );
		}
	}

    uint16 AddOneHash( int hash )
    {
        if( hash == 0 )
		{
			return 0;
		}
		
        uint16 num = 0;

        for( uint16 i = 1, len = TileHashCount(); i < len; i++ )
        {
            if( TileHashs[ i ] == 0 )
			{
                num = i;
            }
			else if( TileHashs[ i ] == hash )
			{
                return i;
			}
		}

        if( num != 0 )
        {
            TileHashs[ num ] = hash;
        }
        else
        {
            num = TileHashCount();
            TileHashs.insertLast( hash );
        }

        SendOneHash( null, num, hash );

        return num;
    }

    bool DelOneHash( int hash )
    {
        if( hash == 0 )
		{
            return false;
        }
		
		for( uint16 i = 1, len = TileHashCount(); i < len; i++ )
        {
            if( TileHashs[ i ] != hash )
			{
                continue;
			}
			
            TileHashs[ i ] = 0;
            SendOneHash( null, i, 0 );
            return true;
        }
		
        return false;
    }

    bool Set( uint16 hs, uint16 val, uint hex, bool rewrite )
    {
        return ( DMO64_set( Tiles, hs, val, hex, rewrite ) && SendTile( null, hs, val, hex ) );
    }

    bool Add( int[]& data, bool rewrite )
    {
        if( DMO64_add( Tiles, data, rewrite ) )
        {
            ApplyBlockers();
            SendTiles( null, data );
            return true;
        }
		
        return false;
    }

    bool Clear( uint hex )
    {
        return Set( 0, 0, hex, true );
    }

    void ApplyBlockers()
    {
        Map@ map = GetMap( Id );
        if( !valid( map ) )
		{
            return;
		}
		
        uint16 hs = 0, val = 0, hexX = 0, hexY = 0;
        uint8  layer = 0;
        for( uint i = 0, len = TileCount(); i < len; i++ )
        {
            DMO64_get( Tiles, i, hs, val, hexX, hexY, layer );
            if( layer != 2 )
			{
                continue;
            }
			
			map.BlockHex( hexX, hexY, true );
        }
    }

    bool SendFullHash( Critter@ player )
    {
        if( TileHashCount() < 1 )
        {
            Log( "Send Tiles Hash Error! Invalid data." );
            return false;
        }
		
        Critter@[] crs;
		Critter@ crit = null;
        GetSendPlayers( player, crs );
        for( uint i = 0, len = crs.length(); i < len; i++ )
		{
			@crit = crs[ i ];
			if( valid( crit ) )
			{
				if( crit.IsPlayer() )
				{
					crit.RunClientScript( "qmap_client@__SetFullHash", int( Id ), int( TileHashCount() ), 0, null, TileHashs );
				}
			}
		}
		
		crs.resize( 0 );
        return true;
    }

    bool SendOneHash( Critter@ player, uint16 hash_num, int hash )
    {
        Critter@[] crs;
		Critter@ crit = null;
        GetSendPlayers( player, crs );
        for( uint i = 0, len = crs.length(); i < len; i++ )
		{
			@crit = crs[ i ];
			if( valid( crit ) )
			{
				if( crit.IsPlayer() )
				{
					crit.RunClientScript( "qmap_client@__SetOneHash", int( Id ), int( hash_num ), int( hash ), null, null );
				}
			}
		}
		
		crs.resize( 0 );
        return true;
    }

    bool SendAllTiles( Critter@ player )
    {
        if( TileCount() < 1 )
        {
            Log( "SendAllTiles Error! Invalid data." );
            return false;
        }
		
        Critter@[] crs;
		Critter@ crit = null;
        GetSendPlayers( player, crs );
        for( uint i = 0, len = crs.length(); i < len; i++ )
		{
			@crit = crs[ i ];
			if( valid( crit ) )
			{
				if( crit.IsPlayer() )
				{
					crit.RunClientScript( "qmap_client@__SetTiles", int( Id ), int( TileCount() ), 1, null, Tiles );
				}
			}
		}
		
		crs.resize( 0 );
        return true;
    }

    bool SendTiles( Critter@ player, int[]& data )
    {
        if( data.length() % 2 != 0 || data.length() < 2 )
        {
            Log( "SendTiles Error! Invalid data." );
            return false;
        }
		
        Critter@[] crs;
		Critter@ crit = null;
        GetSendPlayers( player, crs );
        for( uint i = 0, len = crs.length(); i < len; i++ )
		{
			@crit = crs[ i ];
			if( valid( crit ) )
			{
				if( crit.IsPlayer() )
				{
					crit.RunClientScript( "qmap_client@__SetTiles", int( Id ), int( TileCount() ), 0, null, data );
				}
			}
		}
		
        return true;
    }

    bool SendTile( Critter@ player, uint16 hs, uint16 val, uint hex )
    {
        int data01 = uint16ToInt( hs, val );
        int data02 = int( hex );
			
        Critter@[] crs;
		Critter@ crit = null;
        GetSendPlayers( player, crs );
        for( uint i = 0, len = crs.length(); i < len; i++ )
		{
			@crit = crs[ i ];
			if( valid( crit ) )
			{
				if( crit.IsPlayer() )
				{
					crit.RunClientScript( "qmap_client@__SetTile", int( Id ), data01, data02, null, null );
				}
			}
		}
		
        return true;
    }

}

uint findMTDi( uint mapId )
{
    if( mapId == 0 )
	{
        return uint( -1 );
    }
	
	for( uint i = 0, len = MapTileDatabase.length(); i < len; i++ )
    {
        if( MapTileDatabase[ i ].Id != mapId )
		{
            continue;
        }
		
		if( i != 0 )
        {
            MapTileData@ temp_mtd = MapTileDatabase[ i ];
            MapTileDatabase.removeAt( i );
            MapTileDatabase.insertFirst( @temp_mtd );
        }
		
        return 0;
    }
	
    return uint( -1 );
}

MapTileData@ findMTD( uint mapId )
{
    uint ind = findMTDi( mapId );
    if( ind == uint( -1 ) )
	{
        return null;
    }
	
	return MapTileDatabase[ ind ];
}

MapTileData@ getMTD( uint mapId )
{
    uint num = uint( -1 );
    for( uint i = 0; i < MapTileDatabase.length(); i++ )
    {
        if( MapTileDatabase[ i ].Id == 0 )
		{
            num = i;
        }
		
		if( MapTileDatabase[ i ].Id != mapId )
		{
            continue;
		}
		
        return MapTileDatabase[ i ];
    }
	
    if( num == uint( -1 ) )
    {
        num = MapTileDatabase.length();
        MapTileData new_mtd;
        MapTileDatabase.insertLast( @new_mtd );
    }

    MapTileData@ mtd = MapTileDatabase[ num ];
    mtd.Id = mapId;

    Map@ map = GetMap( mapId );
    if( valid( map ) )
	{
        map.SetEvent( MAP_EVENT_FINISH, "_MapFinish" );
	}
	
    if( IsAnyData( "dmo64_hash_" + mtd.Id ) )
	{
        GetAnyData( "dmo64_hash_" + mtd.Id, mtd.TileHashs );
    }
	
	if( IsAnyData( "dmo64_obj_" + mtd.Id ) )
	{
        GetAnyData( "dmo64_obj_" + mtd.Id, mtd.Tiles );
    }
	
	mtd.ApplyBlockers();

    return mtd;
}

void qmap_critter_in( uint mapId, Critter& cr )
{
    MapTileData@ mtd = getMTD( mapId );
    if( !valid( mtd ) )
	{
        return;
    }
	
	mtd.AddPlayer( cr );
}

void qmap_critter_out( uint mapId, Critter& cr )
{
    cr.ParamBase[ ST_QMAP ] = 0;
    MapTileData@ mtd = findMTD( mapId );

    if( !valid( mtd ) )
    {
        return;
    }
	
    mtd.DelPlayer( cr );
}

void qmap_save_all()
{
    bool ckT = false, ckH = false;

    for( uint i = 0, len = MapTileDatabase.length(); i < len; i++ )
    {
        MapTileData@ mtd = MapTileDatabase[ i ];

        ckT = false;
        ckH = false;

        if( mtd.Id != 0 )
        {
            if( valid( GetMap( mtd.Id ) ) )
            {
                if( mtd.TileHashCount() > 1 )
                {
                    SetAnyData( "dmo64_hash_" + mtd.Id, mtd.TileHashs );
                    ckH = true;

                    if( mtd.TileCount() > 1 )
                    {
                        SetAnyData( "dmo64_obj_" + mtd.Id, mtd.Tiles );
                        ckT = true;
                    }
                }
            }

            if( !( ckH && ckT ) && IsAnyData( "dmo64_obj_" + mtd.Id ) )
			{
                EraseAnyData( "dmo64_obj_" + mtd.Id );
            }
			
			if( !ckH && IsAnyData( "dmo64_hash_" + mtd.Id ) )
			{
                EraseAnyData( "dmo64_hash_" + mtd.Id );
			}
			
            if( valid( GetMap( mtd.Id ) ) )
			{
                continue;
			}
		}
		
        MapTileDatabase.removeAt( i-- );
    }
}

void qmap_load_all()
{
    return;
}

void _MapFinish( Map& map, bool deleted )
{
    uint ind = findMTDi( map.Id );
    if( ind == uint( -1 ) )
	{
        return;
	}
	
    if( IsAnyData( "dmo64_obj_" + map.Id ) )
	{
        EraseAnyData( "dmo64_obj_" + map.Id );
    }
	
	if( IsAnyData( "dmo64_hash_" + map.Id ) )
	{
        EraseAnyData( "dmo64_hash_" + map.Id );
	}
			
    MapTileDatabase.removeAt( ind );
}

bool SetTile( Map& map, uint hash, uint16 hexX, uint16 hexY, uint8 layer )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( !valid( mtd ) )
	{
        return false;
	}
	
    return mtd.Set( mtd.AddOneHash( int( hash ) ), 0, DMO64_makeHex( hexX, hexY, layer ), true );
}

bool SetTile( Map& map, uint hash, uint hash2, uint16 hexX, uint16 hexY, uint8 layer )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( !valid( mtd ) )
	{
        return false;
	}
	
    return mtd.Set( mtd.AddOneHash( int(hash) ), hash2, DMO64_makeHex( hexX, hexY, layer ), true );
}

uint16 AddOneHash( Map& map, uint hash )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( !valid( mtd ) )
	{
        return 0;
	}
	
    return mtd.AddOneHash( int(hash) );
}

bool SetTiles( Map& map, int[]& data )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( !valid( mtd ) )
	{
        return false;
	}
	
    return mtd.Add( data, true );
}

uint GetTile( Map& map, uint16 hexX, uint16 hexY, uint8 layer )
{
    MapTileData@ mtd = findMTD( map.Id );
    if( !valid( mtd ) )
	{
        return 0;
	}
	
    uint16 hs = DMO64_getHashNum( mtd.Tiles, DMO64_makeHex( hexX, hexY, layer ) );

    if( hs == 0 || mtd.TileHashs.length() <= hs )
	{
        return 0;
	}
	
    return uint( mtd.TileHashs[ hs ] );
}

#endif // QMAP_MODULE