#ifndef TELEPORTS_MODULE
#define TELEPORTS_MODULE

#include "_utils.fos"
#include "teleports_h.fos"

import uint CountMapPlayers( Map@ map ) from "manager";

//~run teleports go 0 0 0
void go( Critter& cr, int p0, int p1, int p2 )
{
	ShowTeleports(cr);
}

void ShowTeleports( Critter& cr )
{
	InitTeleports();
	iMenuHandler@ handler = MenuTeleports( "", teleports, null );
	iDialogBox@ menu = OpenMenu( cr, "Select", handler );
}

class MenuTeleports: CenteredMenuHandler
{
	bool isRoot;
	bool redrawing;
	string fullName;
	Teleport@ teleport;
	MenuTeleports@ parent;
	
	MenuTeleports( string fullName, Teleport@ teleport, MenuTeleports@ parent ) 
	{
		this.redrawing = true;
		this.isRoot = !valid(parent);
		this.fullName = fullName;
		@this.teleport = @teleport;
		@this.parent = @parent;
	}

	bool MenuUpdate( Critter& cr, iDialogBox& menu )
	{
		if( !redrawing )
		{
			return false;
		}
		
		uint l = teleport.list();
		for( uint n = 0; n < l; n++ )
		{
			if( menu.ButtonMsg( STR_LEX_NAME , "$name" + teleport.online(n) + " " + teleport.name(n) ) )
			{ 
				Teleport@ target = teleport.get(n);
				if( target.list() == 0 )
				{
					target.warp( cr );
				}
				else
				{
					MenuTeleports@ new_menu = MenuTeleports( this.name(), target, this );
					new_menu.isRoot = false;
					return menu.OpenChild( this.name(), new_menu );
				}
			}
		}		
		
		if( !isRoot )
		{
			if( menu.ButtonMsg( STR_PREVIOUS ) )
			{
				return false;
			}
		}
		
		if( menu.ButtonMsg( STR_CLOSE_MENU_BUTTON ) )
		{
			redrawing = false;
			
			MenuTeleports@ loopback = @parent;
			while( valid( loopback ) )
			{
				loopback.redrawing = false;
				@loopback = @loopback.parent;
			}
			
			return false;
		}

		return true;
	}

	int getDescriptionFile()
	{
		return TEXTMSG_TEXT;
	}

	int getDescriptionLine()
	{
		return STR_TELEPORTS_MENU_MAIN;
	}
	
	string name() {
		return this.fullName + " " + this.teleport.name();
	}
	
	string@ Description( Critter& cr )
	{
		string info = "$name" + name();		
		
		return info;
	}
	
	bool ShouldRedraw( Critter& cr )
	{
		return true;
	}	
}

Teleport@ teleports;

void InitTeleports()
{
	if( valid( teleports ) )
	{
		return;
	}
	
	@teleports = 
		Teleport( "Teleports" )
		//English Segment Locations:
		.add( Teleport( "ENG" )
			.add( Teleport( "Vaut 66" )
				.add( "Level 1",				420,	0, 170, 270 )
				.add( "Level 2",				420,	1, 170, 270 )
				.add( "Level 3",				420,	2, 170, 270 )
				.add( "Level 4",				420,	3, 170, 270 )
				.add( "Crawler_in",				420,	4, 120, 150 )
				.add( "Crawler_out",			420,	5, 125, 86  )
				)
			.add( Teleport( "Events" )
				.add( "Launch site",			225,	0, 170, 270 )
				.add( "Шаттл",					226,	0, 170, 270 )
				)	
			.add( Teleport( "Сильвер город" )
				.add( "Сильверлейк",				202,	0, 170, 270 )
				.add( "Сильверлейк нижний этаж",	202,	1,  95,  75 )
				.add( "Сильверлейк вверх этаж",		202,	2,  80,  70 )
				.add( "Карьер",						200,	0, 170, 270 )
				.add( "Урановая шахта",				201,	0, 170, 270 )
				.add( "Центр города",				203,	0, 170, 270 )
				.add( "Складские помещения",		204,	0, 170, 270 )
				.add( "Трейлерный парк",			205,	0, 170, 270 )
				.add( "Перекресток",				206,	0, 170, 270 )
				.add( "Водяная станция",			207,	0, 170, 270 )
				)
			.add( Teleport( "Сильвер шахты" )
				.add( "Железная шахта",			200,	1, 435, 390 )
				.add( "Медная шахта",			200,	2, 190, 210 )
				.add( "Урановая шахта",			201,	2, 225, 240 )
				.add( "Угольная шахта",			212,	1, 170, 175 )
				)
			.add( Teleport( "Сильвер окрестности" )
				.add( "Райский Авеню",				208,	0, 170, 270 )
				.add( "Паучий Улей",				209,	0, 170, 270 )
				.add( "Шоссе",						210,	0, 170, 270 )
				.add( "Холмы",						211,	0, 170, 270 )
				.add( "Угольная шахта",				212,	0, 170, 270 )
				.add( "РадиоВышка",					213,	0, 170, 270 )
				.add( "Южная автомагистраль",		214,	0, 170, 270 )
				.add( "Дорога на Эльбрус",			215,	0, 170, 270 )
				.add( "Эльбрус",					216,	0, 170, 270 )
				.add( "Пустыня",					218,	0, 170, 270 )
				.add( "Разрущенный торговый центр",	219,	0, 170, 270 )
				.add( "Свалка",						220,	0, 170, 270 )
				.add( "Гасиенда",					221,	0, 170, 270 )
				.add( "Дорога в ГазКО",				222,	0, 170, 270 )
				.add( "ГазКО",						223,	0, 170, 270 )
				.add( "Дорога в холм",				224,	0, 170, 270 )
				)
			)
		//Russian Segment Locations:	
		.add( Teleport( "RUS" )
			.add( Teleport( "Ривердейла" )
				.add( "Руины Ривердейла",	52,		0, 498, 197 )
				.add( "РДР подвал",			52,		1, 480, 370 )
				.add( "РДР 2 этаж",			52,		2, 185, 160 )
				.add( "РДР 3 этаж",			52,		3, 152, 150 )
				.add( "Топь",				138,	0, 170, 270 )
				.add( "Старая часовня",		139,	0, 170, 270 )
				.add( "Лесное Племя",		130,	0, 170, 270 )
				.add( "Лес костей",			82,		0, 170, 270 )
				.add( "Западный Утес",		76,		0, 170, 270 )
				.add( "Мотель Псов",		77,		0, 170, 270 )
				.add( "Заброшенная шахта",	78,		0, 170, 270 )
				.add( "Племенная могила",	73,		0, 170, 270 )
				.add( "Распутье",			74,		0, 170, 270 )
				.add( "Дорога на Шейди",	75,		0, 170, 270 )
				.add( "Каньон",				72,		0, 170, 270 )
				.add( "Cтанция",			131,	0, 170, 270 )
				.add( "ШГ - Запад",			132,	0, 170, 270 )
				.add( "ШГ - Восток",		133,	0, 170, 270 )
				.add( "ШГ - Шахта",			133,	1, 190, 210 )
				.add( "Урановая Шахта",		133,	2, 165, 150 )
				.add( "Токсичная яма",		69,		0, 170, 270 )
				.add( "Каньон, Юг",			70,		0, 170, 270 )
				.add( "Логово Смерти",		71,		0, 170, 270 )
				.add( "Восточный склон",	134,	0, 170, 270 )
				.add( "Ущелье",				135,	0, 170, 270 )
				.add( "Западный Склон",		68,		0, 170, 270 )
				.add( "Дорога",				53,		0, 170, 270 )
				.add( "Побережье",			54,		0, 170, 270 )
				.add( "Чертов остров",		136,	0, 170, 270 )
				.add( "Предгорье",			137,	0, 170, 270 )
				.add( "Рыбацкий привал",	67,		0, 170, 270 )
				.add( "Мост",				55,		0, 170, 270 )
				.add( "Утес",				56,		0, 170, 270 )
				.add( "Рудные Шахты",		57,		0, 170, 270 )
				.add( "Свинцовая Шахта",	60,		0, 170, 270 )
				.add( "Холмы",				61,		0, 170, 270 )
				.add( "Пляж",				62,		0, 170, 270 )
				.add( "Старая Шахта",		63,		0, 170, 270 )
				.add( "Руины",				64,		0, 170, 270 )
				.add( "Кладбище",			65,		0, 170, 270 )
				.add( "Промзона",			79,		0, 170, 270 )
				.add( "Центр",				80,		0, 170, 270 )
				.add( "Жилой Район",		81,		0, 170, 270 )
				.add( "Цветение",			83,		0, 170, 270 )
				.add( "Институт - 1эт",		83,		1, 205, 190 )
				)
			)
		//General Tech Locations:
		.add( "Активация",						92,		0, 337, 184 )
		.add( "Пустота",						93,		0, 296, 178 )
		.add( "Рай",							95,		0, 129, 77  )
		.add( "Ад",								300,	0, 229, 177 )
		.add( "Арена 1",						96,		0, 440, 510 )
		.add( "Арена 2",						96,		1, 180, 270 )
		.add( "Тюрьма",							421,	0, 160, 131 )
		.add( "Госпиталь",						423,	0, 120, 99  )
	;
}

class Pos
{
	uint mapId;
	uint x;
	uint y;
	
	Pos( Map@ map, uint x, uint y )
	{
		this.mapId = valid( map ) ? map.Id : 0;
		this.x = x;
		this.y = y;
	}

	Pos( uint mapId, uint x, uint y )
	{
		this.mapId = mapId;
		this.x = x;
		this.y = y;
	}
	
	bool TransitToMap( Critter& cr )
	{
		if( mapId == 0 ) return false;
		
		Map@ map = GetMap( mapId );
		if( !valid( map ) ) return false;
		
		int attempt = 0;
		uint16 hexX = x, hexY = y;
		while( attempt < 10 )
		{
			if( !map.IsHexPassed( hexX, hexY ) )
				map.MoveHexByDir( hexX, hexY, Random( 0, 5 ), 1 );
			attempt++;
		}

		if( !map.IsHexPassed( hexX, hexY ) )
		{
			cr.Say( SAY_NETMSG, "|0xFFFF00 Hexes are busy." );
			return false;
		}
		
		cr.TransitToMap( mapId, hexX, hexY, cr.Dir );
		
		Location@ loc = map.GetLocation();
		if( valid(loc) )
			cr.SetWorldPos( loc.WorldX, loc.WorldY );
		else
			cr.Say( SAY_NETMSG, "|0xFFFF00 You have no idea where you are." );
		
		return true;
	}
	
	uint online() 
	{
		if( mapId == 0 )
		{
			return 0;
		}
		
		Map@ map = GetMap( mapId );
		if( !valid( map ) )
		{
			return 0;
		}

		return CountMapPlayers( map );
	}
}

class Teleport
{
	Teleport[] _list;
	uint list() 
	{ 
		return _list.length(); 
	}
	
	Teleport@ get( uint n ) 
	{ 
		if( n < 0 || n >= list() ) 
		{
			Log( "[" + name() + "] " + "Attempt of getting teleport #" + n + "/" + list() + "." );
			return null; 
		}
		
		return _list[n];
	}
	
	string _name;
	string name() { return _name; }
	string name( uint n ) 
	{ 
		Teleport@ target = get(n);
		return valid( target ) ? target.name() : "N-A";
	}

	Teleport( string name )
	{
		init( name );
	}
	
	Teleport( string name, uint locPID, uint mapN, uint x, uint y )
	{
		init( name );
		
		Map@ map = GetLocationMap( locPID, mapN );
		@this._pos = Pos( map, x, y );
		
		if( !valid( map ) )
		{
			this._name += " #" + locPID + "-" + mapN;
		}
	}
	
	void init( string name )
	{
		this._name = name;
		this._list.resize(0);
		@this._pos = null;
	}
	
	Teleport@ add( string name )
	{
		return add( Teleport( name ) );
	}
	
	Teleport@ add( string name, uint locPID, uint mapN, uint x, uint y )
	{
		return add( Teleport( name, locPID, mapN, x, y ) );
	}
	
	Teleport@ add( Teleport teleport )
	{
		_list.insertLast( teleport );
		return this;
	}

	Pos@ _pos;
	Teleport@ pos( Pos@ pos )
	{
		@this._pos = @pos;
		return this;
	}

	Teleport@ pos( Map@ map, uint x, uint y )
	{
		return pos( Pos( map, x, y ) );
	}

	Teleport@ pos( uint mapId, uint x, uint y )
	{
		return pos( Pos( mapId, x, y ) );
	}

	uint posOnline() 
	{
		return valid(_pos) ? _pos.online() : 0;
	}

	uint online() 
	{ 
		uint result = posOnline();
		for( uint n = 0, l = list(); n < l; n++ )
		{
			result += online(n);
		}
		
		return result;
	}
	
	uint online( uint n ) 
	{ 
		Teleport@ target = get(n);
		return valid( target ) ? target.online() : 0;
	}

	bool warp( Critter& cr )
	{
		return _pos.TransitToMap( cr );
	}
}

#endif