#ifndef RELOAD
#define RELOAD

#include "_utils.fos"
#include "reload_h.fos"
#include "globalmap_group_h.fos"
#include "combat_h.fos"
#include "time_h.fos"

void ReloadWeapon( Critter& cr, Item& weapon, Item@ ammo )
{
	cr.Wait( 1000 );
	if( !valid( weapon ) )
	{ 
		return;
	}
	
	Map@ map = cr.GetMap();
	if( !valid( map ) )
	{
		return;
	}
	
	uint16 weaponPid = weapon.GetProtoId();

    if( weapon.Proto.Weapon_Caliber == 0 )
	{
        ProcessSpecialWeapon( cr, weapon );
        return;
    }
	
	if( cr.GetTimeEvents( CTE_SLOWRELOAD, null, null, null ) > 0 || cr.Param[ CR_IS_RELOADING ] > 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_YOU_RELOADING );
		return;
	}
	
	weapon.AMMO_ITEM_ID = valid( ammo ) ? ammo.Id : 0;
	int need_ammo = weapon.Proto.Weapon_MaxAmmoCount - weapon.AmmoCount;
	bool ammo_switch = false;
	uint16 ReloadDelay = valid( weapon ) ? weapon.Proto.Wait_Time_3 : 0;
	uint8 weapon_Subtype = valid( weapon ) ? weapon.Proto.Item_Subtype : 0;
	
	if( valid( ammo ) && weapon.AmmoPid != ammo.GetProtoId() )
	{
		LogItemMovement( cr, weapon, "changes ammo: " + itemDesc( ammo ) + " in" );
		//cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_CHANGE_AMMO );
		ammo_switch = true;
	}

	if( !valid( ammo ) || ammo_switch )
	{
		if( weapon.AmmoPid != 0 && weapon.AmmoCount > 0 )
		{
			Item@ existAmmo = cr.GetItem( weapon.AmmoPid, -1 );
			
			if( !valid( existAmmo ) )
			{
				@existAmmo = cr.AddItem( weapon.AmmoPid, weapon.AmmoCount );
			}
			else
			{
				_IncItem( existAmmo, weapon.AmmoCount );
			}
			
			cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_AMMO_EJECTED, "$proto@msg ITEM " + ( existAmmo.Proto.ProtoId * 100 + 2 ) + "@$count" + weapon.AmmoCount );
			
			weapon.AmmoCount = 0;
			weapon.Update();
			
			if( !ammo_switch )
			{
				LogItemMovement( cr, weapon, "unloads " + itemDesc( existAmmo ) + " from" );
				//cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_UNLOAD_WEAPON );
			}
		}
		if( !ammo_switch )
		{
			return;
		}
	}

	if( !ammo_switch )
	{
		if( need_ammo == 0 )
		{
			LogItemMovement( cr, weapon, "checks ammo" );
			if( weapon_Subtype > ITEM_SUBTYPE_WEAPON_NORMAL_END )
			{
				//cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_CHECK_CHARGE );
			}
			else
			{
				//cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_ARM_WEAPON );
			}				
			return;
		}
		
		LogItemMovement( cr, weapon, "loads gun with: " + itemDesc( ammo ) );
		//cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_RELOADS_GUN );			
	}
	
	if( weapon.ROUNDS_FIRED > 0 && ( weapon_Subtype == ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL_REVOLVER ) )
	{
		SpawnSpentCasing( cr, map, weapon, ammo.GetProtoId(), weapon.ROUNDS_FIRED, true );
	}
	
	if( SpeedLoaders.find( weaponPid ) == -1 && ( weapon_Subtype == ITEM_SUBTYPE_WEAPON_NORMAL_PISTOL_REVOLVER || weapon_Subtype == ITEM_SUBTYPE_WEAPON_NORMAL_SHOTGUN || SingleLoad.find( weaponPid ) != -1 ) )
	{
		cr.AddTimeEvent( "cte_slowReload_one", REAL_MS( ReloadDelay ), CTE_SLOWRELOAD, weapon.Id );
	}
	else
	{
		cr.AddTimeEvent( "cte_slowReload", REAL_MS( ReloadDelay ), CTE_SLOWRELOAD, weapon.Id );
	}
	
	weapon.ROUNDS_FIRED = 0;
	weapon.Update();
	
	cr.ModeBase[ MODE_NO_RUN ] = 2;
	cr.ParamBase[ CR_IS_RELOADING ] = 1;
	testInfo( cr, "RELOAD: Started event." );
	weapon.SetEvent( ITEM_EVENT_MOVE, "e_ReloadInterrupt" );
}

void unsafe_CheckAmmo( Critter& cr, int weapon_Id, int replace_marker, int mode, string@ param3, int[]@ param4 )
{
	Item@ weapon = GetItem( weapon_Id );
	if( valid( weapon ) )
	{
		FindAmmo( cr, weapon, replace_marker );
	}
}

void FindAmmo( Critter& cr, Item& weapon, int replace_marker )
{
	if( cr.IsBusy() || cr.Param[ ST_CURRENT_AP ] < 0 )
	{
		return;
	}

	if( !valid( weapon ) )
	{
		return;
	}

	Item@[] ammos;
	Item@[] inventory;
	Item@ ammo = null;
	
	uint count = cr.GetItemsByType( ITEM_TYPE_AMMO, inventory );
	for( uint i = 0; i < count; i++ )
	{
		if( inventory[i].Proto.Ammo_Caliber == weapon.Proto.Weapon_Caliber )
		{
			ammos.insertLast( inventory[i] );
		}
	}
	
	Item@ belt = _CritGetItemMisc( cr );
	if( valid( belt ) && belt.GetProtoId() == PID_AMMO_BELT )
	{
		Item@[] belt_items;
		uint count2 = belt.GetItems( uint( -1 ), belt_items );

		if( count2 > 0 )
		{
			for( uint i = 0; i < count2; i++ )
			{
				if( belt_items[i].Proto.Ammo_Caliber == weapon.Proto.Weapon_Caliber )
				{
					ammos.insertLast( belt_items[i] );
				}
			}
		}
	}
	
	if( ammos.length() == 0 && weapon.Proto.Weapon_Caliber != 0 )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_NO_AMMO );
		return;
	}
	
	for( uint i = 0, len = ammos.length(); i < len; i ++ )
	{
		@ammo = ammos[i];
		if( replace_marker == 0 )
		{
			if( valid( ammo ) && ammo.GetProtoId() == weapon.AmmoPid )
			{
				replace_marker = 2;
				break;
			}
		}
	}
	
	if( replace_marker != 2 )
	{
		for( uint i = 0, len = ammos.length(); i < len; i ++ )
		{
			@ammo = @ammos[ Random( 0, ammos.length() - 1 ) ];
			if( ammo.GetProtoId() != weapon.AmmoPid )
			{
				break;
			}
		}
	}
	
	cr.ParamBase[ ST_CURRENT_AP ] -= weapon.Proto.Weapon_ReloadAp * 100; 
	cr.Action( ACTION_RELOAD_WEAPON, 0, weapon );
	ReloadWeapon( cr, weapon, ammo );
}

void ProcessSpecialWeapon( Critter& cr, Item& weapon )
{	
	uint16 weaponPid = weapon.GetProtoId();
	if( ChargableWeapons.find( weaponPid ) != -1 )
	{
		//cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_GAME, STR_EMOTE_CHECK_CHARGE );
		if( weapon.WEAPON_EVENT == 0 )
		{
			uint[] val = { weapon.Id };
			weapon.WEAPON_EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 10 ) ), "e_RechargeWeapon", val, true );
		}
	}

	cr.ModeBase[ MODE_NO_RUN ] = 0;
	cr.ParamBase[ CR_IS_RELOADING ] = 0;
}

void e_ReloadInterrupt( Item& item, Critter& cr, uint8 fromSlot )
{
	if( !valid( item ) )
	{
		return;
	}
	
	if( cr.Param[ CR_IS_RELOADING ] == 0 )
	{
		return;
	}
	
    if( fromSlot == SLOT_HAND1 )
    {
		testInfo( cr, "RELOAD: Interrupted." );
		cr.Say( SAY_NETMSG, "|0xFFFF00 Weapon reload has been interrupted" );
		cr.EraseTimeEvents( CTE_SLOWRELOAD );
		item.SetEvent( ITEM_EVENT_MOVE, null );
		cr.ModeBase[ MODE_NO_RUN ] = 0;
		cr.ParamBase[ CR_IS_RELOADING ] = 0;
    }
}

uint cte_slowReload_one( Critter& cr, int identifier, uint& rate )
{
	if( cr.Param[ CR_IS_RELOADING ] == 0 )
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 Weapon reload has been interrupted" );
		return 0;
	}
	
    Item@ weapon = GetItem( rate );
	Item@ hand = _CritGetItemHand( cr );
    if( !valid( weapon ) || !valid( hand ) || weapon.Id != hand.Id || weapon.AmmoCount >= weapon.Proto.Weapon_MaxAmmoCount ) 
	{ 
		weapon.AMMO_ITEM_ID = 0;
		weapon.Update();
		cr.ModeBase[ MODE_NO_RUN ] = 0;
		cr.ParamBase[ CR_IS_RELOADING ] = 0;
		return 0; 
	}

	Item@ ammo;
	if ( weapon.AMMO_ITEM_ID > 0 )
	{
		@ammo =  GetItem( weapon.AMMO_ITEM_ID );
	}
	
	if( valid( ammo ) )
	{
        weapon.AmmoCount++;
        weapon.AmmoPid = ammo.GetProtoId();
        _SubItem( ammo, 1 );
    }
	
	weapon.Update();
	
	if( !valid( ammo ) )
	{ 
		weapon.AMMO_ITEM_ID = 0;
		weapon.Update();
		cr.ModeBase[ MODE_NO_RUN ] = 0;
		cr.ParamBase[ CR_IS_RELOADING ] = 0;
		return 0; 
	}
	
	Map@ map = cr.GetMap();
	if( valid( map ) )
	{
		string sound = "RevolverSingleReload.ogg";
		uint8 weapon_Subtype = valid( weapon ) ? weapon.Proto.Item_Subtype : 0;
		if( weapon_Subtype == ITEM_SUBTYPE_WEAPON_NORMAL_SHOTGUN )
		{
			sound = "ShotgunSingleReload.ogg";
		}
		
		PlayGenericSound( map, cr.HexX, cr.HexY, sound, 4 );
		cr.Animate( 0, ANIM2_USE, null, false, true );
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_AMMO_INSERTED, "$proto@msg ITEM " + ( weapon.AmmoPid * 100 + 2 ) + "@$count" + weapon.AmmoCount + " / " + weapon.Proto.Weapon_MaxAmmoCount );
	}
    return REAL_MS( 1500 );
}

uint cte_slowReload( Critter& cr, int identifier, uint& rate )
{
    Item@ weapon = GetItem( rate );
	Item@ hand = _CritGetItemHand( cr );
    if( !valid( weapon ) || !valid( hand ) || weapon.Id != hand.Id ) 
	{ 
		weapon.AMMO_ITEM_ID = 0;
		weapon.Update();
		
		testInfo( cr, "RELOAD: Stopped reloading." );
		cr.ModeBase[ MODE_NO_RUN ] = 0;
		cr.ParamBase[ CR_IS_RELOADING ] = 0;
		return 0;
	}
	
	Item @ ammo;
	if ( weapon.AMMO_ITEM_ID > 0 )
	{
		@ammo = GetItem( weapon.AMMO_ITEM_ID );
	}
	
	if( valid( ammo ) )
    {
        uint count = MIN( ammo.GetCount(), weapon.Proto.Weapon_MaxAmmoCount - weapon.AmmoCount );
		
        weapon.AmmoCount += count;
        weapon.AmmoPid = ammo.GetProtoId();
		
		cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_AMMO_INSERTED, "$proto@msg ITEM " + ( ammo.Proto.ProtoId * 100 + 2 ) + "@$count" + weapon.AmmoCount );
		
        _SubItem( ammo, count );
    }
	
	weapon.AMMO_ITEM_ID = 0;
	weapon.Update();
	
	testInfo( cr, "RELOAD: Stopped reloading." );
	cr.ModeBase[ MODE_NO_RUN ] = 0;
	cr.ParamBase[ CR_IS_RELOADING ] = 0;
    return 0;
}


void _ScorcherInit( Item& item, bool firstTime )
{
	uint[] val = { item.Id };
	item.WEAPON_EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ), "e_RechargeWeapon", val, true );
}

uint e_RechargeWeapon( uint[]@ val )
{
	Item@ weapon = GetItem( val[0] );
	if( !valid( weapon ) )
	{
		return 0;
	}

	if( weapon.Accessory == ACCESSORY_CRITTER )
	{
		uint CritId = weapon.CritId;
		Critter@ owner = GetCritter( CritId );
		if( !valid( owner ) || !_IsOnline( owner ) )
		{
			return REAL_SECOND( 10 );
		}
	}
	else if( weapon.Accessory == ACCESSORY_NONE || weapon.Accessory == ACCESSORY_CONTAINER )
	{
		return REAL_SECOND( 10 );
	}
	
	int hour = GetRealHour();
	uint16 tx = 0, ty = 0;
	Map@ map = weapon.GetMapPosition( tx, ty );
	if( valid( map ) )
	{
		uint mapPid = map.GetProtoId();
		int level = GetMapLevelByPid( mapPid );
		
		if( !IS_NIGHT( hour ) && level >= 0 && weapon.AmmoCount < weapon.Proto.Weapon_MaxAmmoCount )
		{
			weapon.AmmoCount ++;
			weapon.Update();
		}
	}
	return REAL_SECOND( 10 );
}

#endif //RELOAD