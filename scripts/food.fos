#ifndef FOOD
#define FOOD

#include "_utils.fos"
#include "food_h.fos"
#include "gathering_h.fos"
#include "drugs_h.fos"
#include "radiation_h.fos"
#include "paralysis_h.fos"
#include "poison_h.fos"

void ProccessFood( Critter& cr, Critter& target, Item& item )
{
	if( cr.Id != target.Id && !target.IsDead() && !target.IsKnockout() && target.StatBase[ ST_CURRENT_HP ] > 0 && !isOwningNPC( cr, target ) && !sameFaction( cr, target ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TARGET_RESIST );
		SayLog( cr, crInfo( cr ) + " unsuccessfully tried to use " + itemDesc( item ) + " on " + crInfo( target ) + "." );
		return;
	}
		
    CheckFoodFlags( target, item );
	CheckToxins( target, item );
	ApplyFoodEffects( target, item );
}

void ProccessDrink( Critter& cr, Critter& target, Item& item )
{
	if( cr.Id != target.Id && !target.IsDead() && !target.IsKnockout() && target.StatBase[ ST_CURRENT_HP ] > 0 && !isOwningNPC( cr, target ) && !sameFaction( cr, target ) )
	{
		cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_TARGET_RESIST );
		SayLog( cr, crInfo( cr ) + " unsuccessfully tried to use " + itemDesc( item ) + " on " + crInfo( target ) + "." );
		return;
	}
	
	if( item.REMAINING_USES <= 0 )
	{
		SpillOut( @item );
		return;
	}
	
    CheckFoodFlags( target, item );
	CheckToxins( target, item );
	ApplyFoodEffects( target, item );
	
	drinking_process( target, item );
}

void drinking_process( Critter& cr, Item@ item )
{		
	Emote( cr, item );
	
	if( !SpillOut( item ) )
	{
		return;
	}	
}

void CheckFoodFlags( Critter& target, Item& item )
{
	if( FLAG( FOOD_KNOCKOUT, item.Proto.Food_Flags ) )
	{
	   target.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( true ), 100, target.HexX, target.HexY );
	}
	
	if( FLAG( FOOD_POISONED, item.Proto.Food_Flags ) )
	{
		AffectPoison( target, POISON_RANGE );
	}
	
	if( FLAG( FOOD_RADIOACTIVE, item.Proto.Food_Flags ) )
	{
		AffectRadiation( target, RADIATION_RANGE );
	}

	// target.StatBase[ ST_HUNGER ] += item.Proto.Food_Restore * SATURATION_SIMPLIFIER;
	// target.StatBase[ ST_THIRST ] += item.Proto.Food_Thrist * SATURATION_SIMPLIFIER;
	
	uint pid = item.GetProtoId();
	
	uint[] canned_foods = { PID_CANNED_FISH, PID_IRP, PID_CANNED_MEAT };
	if( canned_foods.find( pid ) != -1 )
	{
		target.AddItem( PID_METAL_CAN, 1 );
	}

	uint[] cup_bewerages = { PID_CUP_COFEE, PID_CUP_TEA };
	if( cup_bewerages.find( pid ) != -1 )
	{
		int time = target.Timeout[ TO_TIREDNESS ];
		if( time > 0 )
		{
			switch(pid)
			{
				case(PID_CUP_COFEE):
					time = CLAMP( time - REAL_SECOND( 60 ), 0, time );
					break;
				case(PID_CUP_TEA):
					time = CLAMP( time - REAL_SECOND( 40 ), 0, time );
					break;
			}			
			target.TimeoutBase[ TO_TIREDNESS ] = __FullSecond + time;
		}		
		target.AddItem( PID_CUP, 1 );
	}

	uint[] plated_foods = { PID_BOXTY, PID_CHIPS, PID_MASHED_POTATO, PID_FRIES, PID_itplate2 };
	if( plated_foods.find( pid ) != -1 )
	{
		target.AddItem( PID_itplate2, 1 );
	}
}

void CheckToxins( Critter& target, Item& item )
{
	if( item.TOXIN_LEVEL >= 100 )
	{
		target.ParamBase[CR_VAL9] = 1;
		AffectParalysis( target, item.TOXIN_LEVEL );
	}
}

void ApplyFoodEffects( Critter& target, Item& item )
{
	CheckSpiritLevel( target, item );
	uint8 hungerModifier = item.Proto.Food_Restore;
    uint8 ThirstModifier = item.Proto.Food_Thrist;
	target.StatBase[ ST_HUNGER ] += hungerModifier * 10; //* SATURATION_SIMPLIFIER;
	target.StatBase[ ST_THIRST ] += ThirstModifier * 10; //* SATURATION_SIMPLIFIER;
	target.ParamBase[ ST_POISONING_LEVEL ] += item.POLUTION_LEVEL;
	if( target.ParamBase[ ST_RADIATION_LEVEL ] > 0 )
	{
		AffectRadiation( target, int( -item.SPIRIT_LEVEL * 0.25f ) );
	}
	if( target.ParamBase[ ST_DRUNK ] != 100 )
	{
		target.ParamBase[ ST_DRUNK ] += int( item.SPIRIT_LEVEL * 0.25f );
		if( target.StatBase[ ST_DRUNK ] > 0 && target.GetTimeEvents( CTE_DRUNK, null, null, null ) < 1 )
		{
			target.AddTimeEvent( "gameplay@cte_Drunk", REAL_SECOND( target.Param[ CR_DRUNK_SPEED ] ), CTE_DRUNK, 0 );
		}
	}
	else
	{
		AffectPoison( target, int( item.SPIRIT_LEVEL * 0.25f ) );
	}
}

void Emote( Critter& target, Item& consumed )
{
	target.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT,STR_EMOTE_DRINKS );
	target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_CONSUMED_DRINK, "$proto@msg item " + ( consumed.Proto.ProtoId * 100 ) + "@" );
	
	if( target.ParamBase[ ST_RADIATION_LEVEL ] > 0 && consumed.SPIRIT_LEVEL != 0 )
	{
		target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOST_RAD, "$rad" + consumed.SPIRIT_LEVEL * 0.025 );
	}
	
	if( consumed.POLUTION_LEVEL != 0 )
	{
		target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DRUNK_POISON, "$poison" + consumed.POLUTION_LEVEL );
	}
}

void CheckSpiritLevel( Critter& target, Item& consumed )
{
	if( consumed.SPIRIT_LEVEL != 0 )
	{
		return;
	}
	
	const uint8 item_Subtype = consumed.Proto.Item_Subtype;
	switch( item_Subtype )
	{
		case( ITEM_SUBTYPE_DRUG_ALCOHOL_LIGHT ):
			consumed.SPIRIT_LEVEL = 5;
			break;
		case( ITEM_SUBTYPE_DRUG_ALCOHOL_MEDIUM ):
			consumed.SPIRIT_LEVEL = 20;
			break;
		case( ITEM_SUBTYPE_DRUG_ALCOHOL_HEAVY ):
			consumed.SPIRIT_LEVEL = 40;
			break;
		case( ITEM_SUBTYPE_DRUG_ALCOHOL_SPIRIT ):
			consumed.SPIRIT_LEVEL = 98;
			break;	
		default:
			consumed.SPIRIT_LEVEL = 0;
			break;
	}
}

#endif //FOOD