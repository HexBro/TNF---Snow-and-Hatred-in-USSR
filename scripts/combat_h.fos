// combat.fos

#ifndef COMBAT_H
#define COMBAT_H

	//Common for every module
		#define NO_STATS					( -1 )
	
		// Critical hit/miss flags
		#define HF_NO_EFFECTS				( 0x00000000 )
		#define HF_KNOCKOUT					( 0x00000001 )
		#define HF_KNOCKDOWN				( 0x00000002 )
		#define HF_CRIPPLED_LEFT_LEG		( 0x00000004 )
		#define HF_CRIPPLED_RIGHT_LEG		( 0x00000008 )
		#define HF_CRIPPLED_LEFT_ARM		( 0x00000010 )
		#define HF_CRIPPLED_RIGHT_ARM		( 0x00000020 )
		#define HF_BLINDED					( 0x00000040 )
		#define HF_DEATH					( 0x00000080 )
		#define HF_DAZED					( 0x00000400 )
		#define HF_BYPASS_ARMOR				( 0x00000800 )
		#define HF_DROPPED_WEAPON			( 0x00004000 )
		#define HF_STUNNED					( 0x00008000 )
		#define HF_RANDOM					( 0x00200000 )

		#define MF_NO_EFFECTS				( 0x00000000 )
		#define MF_KNOCKED_DOWN				( 0x00000002 )
		#define MF_ON_FIRE					( 0x00000400 )
		#define MF_WEAPON_EXPLODED			( 0x00001000 )
		#define MF_WEAPON_DESTROYED			( 0x00002000 )
		#define MF_WEAPON_DROPPED			( 0x00004000 )
		#define MF_LOST_NEXT_TURN			( 0x00008000 )
		#define MF_HIT_SELF					( 0x00010000 )
		#define MF_LOST_REST_OF_AMMO		( 0x00020000 )
		#define MF_FIRED_DUD_SHOT			( 0x00040000 )
		#define MF_HURT_SELF				( 0x00080000 )
		#define MF_HIT_RANDOMLY				( 0x00100000 )
		#define MF_CRIPPLED_RANDOM_LIMB		( 0x00200000 )
		#define MF_WAS_KILLED				( 0x10000000 )

		// for WeaponSubtype
		#define WS_UNARMED					( 1 )
		#define WS_MELEE					( 2 )
		#define WS_THROWING					( 3 )
		#define WS_GUN						( 4 )
		
		#define MSG_MISFIRE					"|0xFF0000  MISS"
		#define MSG_OK_FIRE					"|0x00FF00  OK"
		
		// Val0, Val1, is used in item.fos for flashlight Val2 and Val3 is used in reload.fos
		#define ROUNDS_FIRED				Val8
		
		string[] SpentShellSFX = { "SpentShell0.ogg", "SpentShell2.ogg", "SpentShell3.ogg", "SpentShell4.ogg", "SpentShell5.ogg", "SpentShell6.ogg", "SpentShell7.ogg", "SpentShell8.ogg",
								   "SpentShell9.ogg", "SpentShell10.ogg", "SpentShell11.ogg", "SpentShell12.ogg", "SpentShell13.ogg", "SpentShell14.ogg", "SpentShell15.ogg","SpentShell16.ogg",
								   "SpentShell17.ogg", "SpentShell18.ogg", "SpentShell19.ogg", "SpentShell20.ogg", "SpentShell21.ogg" };
		string[] DirtHitNormSFX = {	"dirt_01.ogg", "dirt_02.ogg", "dirt_03.ogg", "dirt_04.ogg", "dirt_05.ogg", "dirt_06.ogg" };						 

		const uint16[] not_bloody_attacks = { PID_HAND_ATTACK0, PID_HAND_ATTACK1, PID_HAND_ATTACK2, PID_HAND_ATTACK3, PID_HAND_PIERCING, PID_HAND_GRAPPLE, PID_BOXING_GLOVES, PID_LEG_ATTACK0,
											  PID_LEG_ATTACK1, PID_LEG_ATTACK2, PID_LEG_ATTACK3, PID_LEG_PIERCING };

	//All but combat module
	#ifndef COMBAT_MODULE
		#ifdef __SERVER
			import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, int attackerId, uint hitLocation, bool isCritical ) from "combat";
			import void CombatAttack( Critter& cr, Critter@ target, ProtoItem& weapon, uint8 weaponMode, ProtoItem@ ammo, uint16 hexX, uint16 hexY ) from "combat";
			import int getFullSkill( Critter& cr, Critter@ target, int skillNum, uint8 weaponSubtype ) from "combat";
			import uint GetAimApCost( int hitLocation ) from "combat";
			import void CollateralDamage( Map& map, uint16 tx, uint16 ty ) from "combat";
			import int  RawToHit( Critter& cr, Critter& target, ProtoItem@ weapon, uint8 weaponUse, ProtoItem@ ammo ) from "combat";
			import void HookHoldAttack( Critter@ target, uint8 hardness ) from "combat";
			import void AttackSound( Critter& cr, ProtoItem& weapon, uint8 weaponMode ) from "combat";
			import void SpawnSpentCasing( Critter& cr, Map& map, Item& weapon, uint16 ammoPid, int ammoRound, bool extraction ) from "combat";
			import bool CritRoll( int critBase, Critter& target ) from "combat";
		#endif // __SERVER
	#endif // COMBAT_MODULE

#endif // COMBAT_H