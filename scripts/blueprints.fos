#ifndef BLUEPRINTS
#define BLUEPRINTS

#include "_utils.fos"

//TryMakeBlueprint( cr, item );

//EnlistBlueprints( cr );

//Disabled mechanic 
class Blueprint
{
	uint original;
	uint pid;
	uint difficulty;
	
	Blueprint( uint original, uint pid, uint difficulty = 300 )
	{
		this.original = original;
		this.pid = pid;
		this.difficulty = difficulty;
	}
	
	string info()
	{
		return "Blueprint [" + pid + "] of #" + original + " diff " + difficulty + "%";
	}
	
	bool check( Critter& cr, Item& item )
	{
		if( item.GetProtoId() == original )
		{
			bool success = false;
			if( Random( 0, difficulty ) <= cr.Skill[SK_SCIENCE] )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 Вы смогли сделать чертёж предмета." );
				cr.AddItem( pid, 1 );
				success = true;
			}
			else
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 Вы не смогли сделать чертёж предмета, вам нужно переварить информацию в течении суток." );
			}
			
			if( cr.ParamBase[ CR_JETTED ] == 0 ) {			
				cr.AddTimeEvent( "cte_tired", 0, CTE_TIRED, 5 );
			}
			
			if( Random( 0, 300 ) <= cr.Skill[SK_REPAIR] )
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 В ходе работы вы успешно пересобрали исследуемый предмет заного." );
			}
			else
			{
				cr.Say( SAY_NETMSG, "|0xFFFF00 В ходе работы вы сломали исследуемый предмет" + ( success ? ", но оно того стоило!" : "." ) );
				_SubItem( item, 1 );
			}
			
			return true;
		}
		
		return false;
	}
}

uint cte_tired( Critter& cr, int identifier, uint& rate )
{
	rate--;
	if( rate >= 0 || rate < 255 ) //hotfixed
		return GAME_HOUR(1);
	
	return 0;
}

	// ЧЕРТЕЖИ //

Blueprints@ blueprints;
void InitBlueprints()
{
	if( valid( blueprints ) ) return;

	@blueprints = CreateBlueprints()
		.add( PID_10MM_PISTOL, PID_BP_COLT6520, 250 )
		.add( PID_9MM_MAUSER, PID_BP_MOUSER, 250 )
		.add( PID_44_MAGNUM_REVOLVER, PID_BP_45REVOLVER, 250 )
		.add( PID_14MM_PISTOL, PID_BP_SIG14MM, 300 )
		.add( PID_DESERT_EAGLE, PID_BP_DEAGLE, 250 )
		.add( PID_COLT1911, PID_BP_COLT1911, 250 )
		.add( PID_ANACONDA, PID_BP_ANACONDA, 250 )
		.add( PID_NEEDLER_PISTOL, PID_BP_INJECTOR, 350 )
		.add( PID_PK12_GAUSS_PISTOL, PID_BP_GAUSSPIS, 500 )
		.add( PID_223_PISTOL, PID_BP_223PISTOL, 350 )
		.add( PID_10MM_SMG, PID_BP_SMG10MM, 250 )
		.add( PID_GREASE_GUN, PID_BP_GGUN, 250 )
		.add( PID_HK_P90C, PID_BP_P90, 350 )
		.add( PID_HK_G11, PID_BP_G11, 450 )
		.add( PID_HUNTING_RIFLE, PID_BP_HUNTING, 250 )
		.add( PID_XL70E3, PID_BP_XL5MM, 450 )
		.add( PID_SNIPER_RIFLE, PID_BP_SNIPER223, 400 )
		.add( PID_ASSAULT_RIFLE, PID_BP_AK112, 350 )
		.add( PID_FN_FAL, PID_BP_FNFL, 450 )
		.add( PID_TOMMY_GUN, PID_BP_TOMMYGUN, 350 )
		.add( PID_M72_GAUSS_RIFLE, PID_BP_GAUSSGUN, 550 )
		.add( PID_SHOTGUN, PID_BP_DOUBLESHOTGUN, 250 )
		.add( PID_COMBAT_SHOTGUN, PID_BP_COMBSHOTGUN, 350 )
		.add( PID_HK_CAWS, PID_BP_CAWS, 450 )
		.add( PID_PANCOR_JACKHAMMER, PID_BP_JHUMMER, 450 )
		.add( PID_REMINGTON, PID_BP_REMINGTON870, 350 )
		.add( PID_LASER_PISTOL, PID_BP_LASPIST, 250 )
		.add( PID_PLASMA_PISTOL, PID_BP_PLASPIST, 300 )
		.add( PID_YK32_PULSE_PISTOL, PID_BP_PULSEPIST, 350 )
		.add( PID_LASER_RIFLE, PID_BP_LASRIFLE, 350 )
		.add( PID_PLASMA_RIFLE, PID_BP_PLASRIFLE, 400 )
		.add( PID_YK42B_PULSE_RIFLE, PID_BP_PULSERIFLE, 450 )
		.add( PID_GATLING_LASER, PID_BP_GATLING, 550 )
		.add( PID_SOUND_BLASTER, PID_BP_AUCUSTIC, 350 )
		.add( PID_FLAMER, PID_BP_FLAMER, 250 )
		.add( PID_IMPROVED_FLAMETHROWER, PID_BP_FLAMER, 300 )
		.add( PID_MINIGUN, PID_BP_MINIGUN, 300 )
		.add( PID_ROCKET_LAUNCHER, PID_BP_BAZOOKA, 450 )
		.add( PID_VINDICATOR_MINIGUN, PID_BP_VINDICATOR, 450 )
		.add( PID_M60, PID_BP_M60, 350 )
		.add( PID_LIGHT_SUPPORT_WEAPON, PID_BP_LSW, 350 )
		.add( PID_BOZAR, PID_BP_BOZAR, 450 )
		.add( PID_AUTOCANNON, PID_BP_AUTOCANNON, 300 )
		.add( PID_GRENADELAUNCHER, PID_BP_M32,  450 )
		.add( PID_CATTLE_PROD, PID_BP_SHOCKER, 300 )
		.add( PID_POWER_FIST, PID_BP_PFIST, 350 )
		.add( PID_SUPER_SLEDGE, PID_BP_SSLEDGE, 250 )
		.add( PID_RIPPER, PID_BP_RIPPER, 350 )
		.add( PID_FRAG_GRENADE, PID_BP_FRAG_GRENADE, 300 )
		.add( PID_PLASMA_GRENADE, PID_BP_PLAS_GRENADE, 350 )
		.add( PID_PULSE_GRENADE, PID_BP_EMP_GRENADE, 350 )
		.add( PID_GRENADELAUNCHER_AMMO, PID_BP_40MM, 300 )
		.add( PID_EXPLOSIVE_ROCKET, PID_BP_FRAGMIS, 300 )
		.add( PID_ROCKET_AP, PID_BP_KRAKMIS, 350 )
		.add( PID_4_7MM_CASELESS, PID_BP_CASELESS, 400 )
		.add( PID_2MM_EC_AMMO, PID_BP_GAUSAMMO, 400 )
		.add( PID_MICRO_FUSION_CELL, PID_BP_FREACTOR, 400 )
		.add( PID_HOUND_ARMOR, PID_BP_HOUND_ARMOR, 350 )
		.add( PID_REANIMATION_KIT, PID_BP_DEFIB, 350 )
		.add( PID_hndcrclr, PID_BP_HAND_SAW, 250 )
		.add( PID_plsmprot, PID_BP_EMP_PROBOINIK , 500 )
		.add( PID_DOMINION_ROBUR, PID_BP_DOMINION_ROBUR, 500 )
		.add( PID_DOMINION_LATENS, PID_BP_DOMINION_LATENS, 350 )
		.add( PID_FPRESS, PID_BP_FPRESS, 350 )
		.add( PID_CENTRF, PID_BP_CENTRF, 450 )	
	;
}

Blueprints@ CreateBlueprints()
{
	return Blueprints();
}

class Blueprints
{
	Blueprint[] list;
	
	Blueprints@ add( uint original, uint pid, uint difficulty = 300 )
	{
		return this.add( Blueprint( original, pid, difficulty ) );
	}
	
	Blueprints@ add( Blueprint@ item )
	{
		list.insertLast( item );
		return this;
	}
	
	bool check( Critter& cr, Item& item )
	{
		uint[] rates;
		if( cr.GetTimeEvents( CTE_TIRED, null, null, rates ) > 0 )
		{
			uint timeleft = 0;
			if( rates.length() > 0 ) 
				timeleft = rates[0];
				
			if( timeleft > 255 )
			{
				cr.EraseTimeEvents( CTE_TIRED );
				timeleft = 0;
			}
			
			cr.Say( SAY_NETMSG, "Вы ещё не отдохнули до конца после прошлого раза. " + ( timeleft > 0 ? "Осталось около " + timeleft + " часов." : "Ещё немного отдыха - и можно вернуться за работу." ) );
			return true;
		}
		
		for( uint i = 0; i < list.length(); i++ )
		{
			if( list[i].check( cr, item ) ) return true;
		}
		
		cr.Say( SAY_NETMSG, "Вы не смогли сделать чертёж этого предмета." );
		return false;
	}
	
	bool info( Critter& cr )
	{
		cr.Say( SAY_NETMSG, "Список доступных чертежей:" );
		for( uint i = 0; i < list.length(); i++ )
		{
			cr.Say( SAY_NETMSG, i + ") " + list[i].info() );
		}
		return true;
	}
}

bool TryMakeBlueprint( Critter& cr, Item& item )
{
	InitBlueprints();
	
	return blueprints.check( cr, item );
}

bool EnlistBlueprints( Critter& cr )
{
	InitBlueprints();
	
	return blueprints.info( cr );
}

#endif // BLUEPRINTS