#ifndef MAP_LIGHTS
#define MAP_LIGHTS

#include "_utils.fos"
#include "map_lights_h.fos"

void unsafe_ToggleLights( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
	bool blocked = ToggleMapLights( player.GetMap(), param0 != 0 );
	player.Say( SAY_NETMSG, "Light switchers are " + flagValue( blocked, "|0xFF0000 " + "blocked", "|0xFFFF00 " + "working" ) + "|0x00FF00 ." );
}

//Returns TRUE if light switchers are blocked.
bool ToggleMapLights( Map@ map, bool state )
{
	if( !valid( map ) )
	{
		return false;
	}
	
	Item@[] light_switches;
	for( uint j = PID_SWITCH1_DIR2, len = PID_SWITCH3_DIR3; j < len; j++ )
	{
		map.GetItems( j, light_switches );
	}
	
	bool blockedSwitchers = false;
	for( uint k = 0, len = light_switches.length(); k < len; k++ )
	{
		Item@ lightSwitch = light_switches[k];
		if( valid( lightSwitch ) )
		{
			lightSwitch.MAPLIGHT_STATE = state ? 1 : 0;
			ChangeFrame( lightSwitch, state ? 1 : 0 );

			if( lightSwitch.LIGHT_GROUP > 0 )
			{
				lightSwitch.LIGHT_GROUP_BACKUP = lightSwitch.LIGHT_GROUP;
				lightSwitch.LIGHT_GROUP = 0;
				blockedSwitchers = true;
			}
			else
			{
				lightSwitch.LIGHT_GROUP = lightSwitch.LIGHT_GROUP_BACKUP;
				lightSwitch.LIGHT_GROUP_BACKUP = 0;
			}
			
			lightSwitch.Update();
		}
	}
	light_switches.resize(0);
	
	Item@[] lights;
	map.GetItems( PID_LIGHT_SOURCE, lights );
	for( uint i = 0, len = lights.length(); i < len; i++ )
	{
		Item@ light = lights[i];
		if( valid( light ) )
		{
			if( state )
			{
				SETFLAG( light.Flags, ITEM_LIGHT );
			}
			else
			{
				UNSETFLAG( light.Flags, ITEM_LIGHT );
			}
			
			light.Update();
		}
	}
	lights.resize(0);
	
	RefreshClientsMap( map );
	return blockedSwitchers;
}

bool UseLightSwitch( Critter& cr, Item& lightSwitch )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
	{
		return false;
	}
	if( !valid( lightSwitch ) )
	{
		return false;
	}
	
	if( lightSwitch.MAPLIGHT_STATE == 0 )
	{
		lightSwitch.MAPLIGHT_STATE = 1;
		ChangeFrame( lightSwitch, 1 );
	}
	else
	{
		lightSwitch.MAPLIGHT_STATE = 0;
		ChangeFrame( lightSwitch, 0 );
	}
	
	int LightGroup = lightSwitch.LIGHT_GROUP;
	LightsToggle( cr, map, LightGroup );
	
	return true;
}

void LightsToggle( Critter& cr, Map& map, int LightGroup )
{
	Item@[] lights;
	map.GetItems( PID_LIGHT_SOURCE, lights );
	
	for( uint i = 0, len = lights.length(); i < len; i++ )
	{
		Item@ light = lights[i];
		if( valid( light ) )
		{
			if( light.LIGHT_GROUP == LightGroup )
			{
				if( light.LIGHT_INIT == 0 )
				{
					light.PicMap = GetStrHash( "art\\items\\blank.png" );
					light.LIGHT_INIT = 1;
					light.Update();
				}
				
				if( !FLAG( light.Flags, ITEM_LIGHT ) )
				{
					SETFLAG( light.Flags, ITEM_LIGHT );
					light.Update();
				}
				else
				{ 
					UNSETFLAG( light.Flags, ITEM_LIGHT );
					light.Update();
				}
				
				light.Update();
			}
		}
	}
	RefreshClientsMap( map );
	lights.resize(0);
}

#endif // MAP_LIGHTS